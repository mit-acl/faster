#Params for FASTER

use_ff: true # use feedforward
visual: true #publish visualization stuff
dc: 0.01            #(seconds) Duration for the interpolation=Value of the timer pubGoal
goal_radius: 0.3    #[m] Drone has arrived to the goal when distance_to_goal<GOAL_RADIUS
drone_radius: 0.42  #[m] Used for collision checking
force_goal_height: true
goal_height: 1  #[m] Assumed height for clicked 2d nav goals in Rviz  (not used if force_goal_height is true or if it is a ground robot )

N_whole: 6 #[-] Number of discretization points in the whole trajectory
N_safe: 6 #[-] Number of discretization points in the safe path

Ra: 4.0            # [m] Radius of the sphere S
w_max: 4.0          # [rd/s] Maximum angular velocity. ~4.0 for Hardware
alpha_filter_dyaw: 0 #was 0.92  #[] Filter parameter for dyaw, \in [0,1]. Higher--> More aggressive filtering

z_ground: 0.0         #[m] points below this are considered ground
z_max: 2         #[m] JPS is not allowed to give a solution that goes higher than this height
inflation_jps: 0.47  #[m] The obstacles are inflated (to run JPS) by this amount
factor_jps: 1  #[m] JPS is run with resolution=factor_jps*(resolution of the map)

v_max: 5.0   #[m/s]  1.4
a_max: 5.0   #[m/s2] 1.4
j_max: 8.0  #[m/s3] 35

#Factors for time allocation
gamma_whole: 20       #[-]
gammap_whole: 20  #[-]
increment_whole: 1.0 #[-]
gamma_safe: 20         #[-]
gammap_safe: 20    #[-]
increment_safe: 1.0   #[-]

delta_a: 0.5
delta_H: 1.0

max_poly_whole: 3 #Should be less than N_whole 
max_poly_safe: 3 #Should be less than N_safe
dist_max_vertexes: 1.5 #[m] Maximum distance between two vertexes in the JPS before doing the cvx decomp (more vertexes are added to force this)
gurobi_threads: 0 #[threads] Number of threads that Gurobi will use. If 0, Gurobi will try to choose all the cores.  If computer is maxed out, threads=1 works faster!
gurobi_verbose: 0 #Verbosity of Gurobi. 0 or 1

use_faster: true  #TODO (this param doesn't work yet) if false, it will plan only in free space

is_ground_robot: false